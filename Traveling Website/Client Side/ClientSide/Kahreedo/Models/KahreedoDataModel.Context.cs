//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Khareedo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class kahreedoEntities1 : DbContext
    {
        public kahreedoEntities1()
            : base("name=kahreedoEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<admin_Employee> admin_Employee { get; set; }
        public DbSet<admin_Login> admin_Login { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<genMainSlider> genMainSliders { get; set; }
        public DbSet<genPromoRight> genPromoRights { get; set; }
        public DbSet<GoodReceiptNote> GoodReceiptNotes { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderDetail> OrderDetails { get; set; }
        public DbSet<Payment> Payments { get; set; }
        public DbSet<PaymentType> PaymentTypes { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<PurchaseReturn> PurchaseReturns { get; set; }
        public DbSet<RecentlyView> RecentlyViews { get; set; }
        public DbSet<RequestforQoutation> RequestforQoutations { get; set; }
        public DbSet<Review> Reviews { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<SalesReturn> SalesReturns { get; set; }
        public DbSet<ShippingDetail> ShippingDetails { get; set; }
        public DbSet<SubCategory> SubCategories { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<tbl_SupplierPayment> tbl_SupplierPayment { get; set; }
        public DbSet<tbl_Tax> tbl_Tax { get; set; }
        public DbSet<tbl_UnitofMeasures> tbl_UnitofMeasures { get; set; }
        public DbSet<Wishlist> Wishlists { get; set; }
    
        public virtual int InsertcustomerQoutation(Nullable<int> reqQoutationID, string product, string customer, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<int> taxRateID, Nullable<int> paymentTerm, string conUnit)
        {
            var reqQoutationIDParameter = reqQoutationID.HasValue ?
                new ObjectParameter("ReqQoutationID", reqQoutationID) :
                new ObjectParameter("ReqQoutationID", typeof(int));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var quantityNeededParameter = quantityNeeded.HasValue ?
                new ObjectParameter("QuantityNeeded", quantityNeeded) :
                new ObjectParameter("QuantityNeeded", typeof(int));
    
            var supplierQuantityParameter = supplierQuantity.HasValue ?
                new ObjectParameter("SupplierQuantity", supplierQuantity) :
                new ObjectParameter("SupplierQuantity", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(int));
    
            var productDateParameter = productDate.HasValue ?
                new ObjectParameter("ProductDate", productDate) :
                new ObjectParameter("ProductDate", typeof(System.DateTime));
    
            var taxRateIDParameter = taxRateID.HasValue ?
                new ObjectParameter("TaxRateID", taxRateID) :
                new ObjectParameter("TaxRateID", typeof(int));
    
            var paymentTermParameter = paymentTerm.HasValue ?
                new ObjectParameter("PaymentTerm", paymentTerm) :
                new ObjectParameter("PaymentTerm", typeof(int));
    
            var conUnitParameter = conUnit != null ?
                new ObjectParameter("ConUnit", conUnit) :
                new ObjectParameter("ConUnit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertcustomerQoutation", reqQoutationIDParameter, productParameter, customerParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateIDParameter, paymentTermParameter, conUnitParameter);
        }
    
        public virtual int InsertCustomerRequestforQoutation(Nullable<int> product, Nullable<int> customer, Nullable<int> quantity, Nullable<System.DateTime> productDate)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(int));
    
            var customerParameter = customer.HasValue ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var productDateParameter = productDate.HasValue ?
                new ObjectParameter("ProductDate", productDate) :
                new ObjectParameter("ProductDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCustomerRequestforQoutation", productParameter, customerParameter, quantityParameter, productDateParameter);
        }
    
        public virtual int InsertRequestforQoutation(Nullable<int> product, Nullable<int> supplier, Nullable<int> quantity, Nullable<System.DateTime> productDate)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(int));
    
            var supplierParameter = supplier.HasValue ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var productDateParameter = productDate.HasValue ?
                new ObjectParameter("ProductDate", productDate) :
                new ObjectParameter("ProductDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRequestforQoutation", productParameter, supplierParameter, quantityParameter, productDateParameter);
        }
    
        public virtual int InsertSupplierGoodReceipt(string reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate)
        {
            var reqQoutationIDParameter = reqQoutationID != null ?
                new ObjectParameter("ReqQoutationID", reqQoutationID) :
                new ObjectParameter("ReqQoutationID", typeof(string));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var quantityNeededParameter = quantityNeeded.HasValue ?
                new ObjectParameter("QuantityNeeded", quantityNeeded) :
                new ObjectParameter("QuantityNeeded", typeof(int));
    
            var supplierQuantityParameter = supplierQuantity.HasValue ?
                new ObjectParameter("SupplierQuantity", supplierQuantity) :
                new ObjectParameter("SupplierQuantity", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(int));
    
            var productDateParameter = productDate.HasValue ?
                new ObjectParameter("ProductDate", productDate) :
                new ObjectParameter("ProductDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierGoodReceipt", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter);
        }
    
        public virtual int InsertSupplierQoutation(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<int> taxRateID, Nullable<int> paymentTerm, string conUnit)
        {
            var reqQoutationIDParameter = reqQoutationID.HasValue ?
                new ObjectParameter("ReqQoutationID", reqQoutationID) :
                new ObjectParameter("ReqQoutationID", typeof(int));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var quantityNeededParameter = quantityNeeded.HasValue ?
                new ObjectParameter("QuantityNeeded", quantityNeeded) :
                new ObjectParameter("QuantityNeeded", typeof(int));
    
            var supplierQuantityParameter = supplierQuantity.HasValue ?
                new ObjectParameter("SupplierQuantity", supplierQuantity) :
                new ObjectParameter("SupplierQuantity", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(int));
    
            var productDateParameter = productDate.HasValue ?
                new ObjectParameter("ProductDate", productDate) :
                new ObjectParameter("ProductDate", typeof(System.DateTime));
    
            var taxRateIDParameter = taxRateID.HasValue ?
                new ObjectParameter("TaxRateID", taxRateID) :
                new ObjectParameter("TaxRateID", typeof(int));
    
            var paymentTermParameter = paymentTerm.HasValue ?
                new ObjectParameter("PaymentTerm", paymentTerm) :
                new ObjectParameter("PaymentTerm", typeof(int));
    
            var conUnitParameter = conUnit != null ?
                new ObjectParameter("ConUnit", conUnit) :
                new ObjectParameter("ConUnit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateIDParameter, paymentTermParameter, conUnitParameter);
        }
    
        public virtual ObjectResult<ViewRequestforQoutation_Result> ViewRequestforQoutation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewRequestforQoutation_Result>("ViewRequestforQoutation");
        }
    }
}
